from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QTableWidgetItem, QMessageBox, QPushButton, QLineEdit, QTableWidget
from PyQt5.QtGui import QIcon
from login import Ui_Form
from ui_main import Ui_MainWindow
import sys
from database import DataBase
import sqlite3
import pandas as pd



#LOGIN



class Login(QWidget, Ui_Form):
    def __init__(self) -> None:
        super(Login, self).__init__()
        self.setupUi(self)
        self.setWindowTitle("Login do Sistema")
        
        # Campo de senha para mostrar asteriscos
        self.txt_password.setEchoMode(QLineEdit.Password)
        self.btn_login.clicked.connect(self.open_system)
         
       
    def open_system(self):
        username = self.txt_username.text()  # Certifique-se de que o campo txt_username existe no seu UI
        password = self.txt_password.text()
        
        if username == 'admin' and password == '123':
            self.w = MainWindow()
            self.w.show()
            self.close()
        else:
            QMessageBox.warning(self, 'Erro', 'Nome de usuário ou senha inválidos')


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setupUi(self)
        self.setWindowTitle("Sistema de Cadastro e Faturamento")
        appIcon = QIcon(u"")
        self.setWindowIcon(appIcon)
        
        self.db = DataBase()
        self.db.Conecta()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = Login()
    window.show()
    sys.exit(app.exec_())





import sqlite3  # Importar corretamente o sqlite3

class Data_base:

    def __init__(self, name='system.db') -> None:
        self.name = name

    def connect(self):
        self.connection = sqlite3.connect(self.name)  # Correção do nome do módulo

    def close_connection(self):
        try:
            self.connection.close()
        except:
            pass

    def create_table_cliente(self):
        cursor = self.connection.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS cliente (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            contato INTEGER NOT NULL
        )
        """)

    def create_table_produtos(self):
        cursor = self.connection.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS produto (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            quantidade INTEGER NOT NULL
        )
        """)

    def create_table_pedidos(self):
        cursor = self.connection.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS pedidos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            cliente TEXT NOT NULL,
            descricao TEXT NOT NULL,
            valor_und REAL NOT NULL,
            quantidade INTEGER NOT NULL,
            valor_total REAL NOT NULL,
            data_entrega TEXT NOT NULL
        )
        """)

    def create_table_historico(self):
        try:  # Adicionando o bloco try
            cursor = self.connection.cursor()
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS historico (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                cliente TEXT NOT NULL,
                descricao TEXT NOT NULL,
                valor_und REAL NOT NULL,
                quantidade INTEGER NOT NULL,
                valor_total REAL NOT NULL,
                data_entrega TEXT NOT NULL,
                data_historico TEXT NOT NULL,  -- Campo para a data do histórico
                hora_historico TEXT NOT NULL   -- Campo para a hora do histórico
            )
            """)
            self.connection.commit()
        except sqlite3.Error as e:
            print(f"Erro ao conectar ao banco de dados: {e}")

    def close(self):
        # Método para fechar a conexão com o banco de dados
        if self.connection:
            self.connection.close()

